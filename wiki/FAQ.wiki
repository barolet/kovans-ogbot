#summary Frequently Asked Questions
#labels Featured

===Q: How do I run the bot in Windows?===

A: Download the Windows version, decompress it and run OGBot.exe

===Q: How do I run the bot in Linux?===

A: Download the generic version. Under Linux, the libraries required by the bot are usually provided by the distributions in form of packages, so getting the work to work is pretty straightforward. For example, under Ubuntu the following packages are required:
 # *python-qt4* for !PyQt.
 # *libqt4-core* and *libqt4-gui* for QT.
 # *python2.4* for Python.
In other distros their names might differ but not much. 
After installing them just run runbot.sh

Note for Gentoo Linux: there is not a pyqt-4 package, so !PyQt must be compiled manually. Instructions here: http://www.riverbankcomputing.com/Docs/PyQt4/pyqt4ref.html#installing-pyqt

===Q: How do I run the bot in Mac OS X?===

A: There is a user who wrote about it in the Google Group:
http://groups.google.com/group/kovans-ogbot/browse_frm/thread/674a21ebcc4fe7d4

===Q: My server has less than 500 solar systems per galaxy!===

A: The number of solar systems per galaxy can be changed in the configuration file (located in files/config/config.ini)

===Q: I found some error in the bot, how do I report it?===

A: Go to the issues tab and open a new issue, then follow the instructions. 

===Q: Does the bot obbey the bashing rules?===

A: Yes, as they don't apply for attacks to inactive planets.

===Q: What user-agent does the bot send?===

A: By default the bot identifies itself as Internet Explorer 6 running on a fresh Windows XP installation. This is: Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1). 
But it can be changed in the configuration file (files/config/config.ini)

===Q: How do I reset the bot?===

A: Delete the files in the directory files/botdata.

===Q: My language is not supported. Can I contribute a translation?===

A: Sure. What you have to do is create a new translation file for your language and place it in the languages directory. You should use english.ini as a template, as there are further instructions in it. If it works send it to the author and it will probably be included in the next release. Non-occidental languages should work also.

===Q: Can I help improve the bot?====

A: All contributions are welcome. The basic requirement to be able to contribute in the development is the knowledge of Python, although to mess with some other parts, knowing other things is required. For example to mess with communication with OGame servers you need to know a bit of HTTP, HTML and probably regexps, and to mess with interface you need to know QT.
If you want to use part or all of OGBot's code in your project, you can if you follow the GPL license requisites.

===Q: How do I run the multi-platform source version of the bot in Windows?===

A: The easiest and recommended way to run the bot in Windows is to use the prepared version, but it is possible to use the generic version. These are the steps:

 #. Download & install Python 2.5 (http://www.python.org/download/releases/2.5/)
 #. Download & install QT 4 GPL for Windows (http://www.trolltech.com/developer/downloads/qt/windows)
 #. Download & install !PyQt v4 GPL for Windows (http://www.riverbankcomputing.co.uk/pyqt/download.php)

Then:
 #. Right-click on "My Computer" and select "Properties"
 #. Click the "Advanced" tab
 #. Click "Environment Variables"
 #. In the system variable PATH include "C:\Qt\4.2.2\bin;C:\Python25" (assuming you installed QT and Python in their default locations).

After all that, execute runbot.bat and it _should_ work.

===Q: What libraries does the bot depend on?===

A: 
  # Python 2.4 or newer.
  # QT 4.0 or newer, by Trolltech.
  # !PyQt4 (python bindings for QT).

===Q: How does the bot choose which planet to attack?===

A: Here is an extract from one issue's comments that explains the differences in the algorithms between OGBot versions 1 and 2.

_The_ _v2_ _algorithm_ _is_ _indeed_ _completly_
_different_ _from_ _that_ _of_ _v1._ _v1's_ _algorithm_ _consisted_ _simply_ _in:_ 
 # _-_ _Scan_ _a_ _solar_ _system_ _for_ _inactives_
 # _-_ _Spy_ _them_
 # _-_ _Attack_ _those_ _that_ _had_ _more_ _resources_ _than_ _the_ _limit_ _the_ _user_ _configured._ 
 # _-_ _Go_ _to_ _the_ _next_ _solar_ _system._

_V2's_ _algorithm,_ _on_ _the_ _other_ _hand,_ _is_ _completly_ _different._ _It_ _is_ _designed_ _to_ _collect_
_the_ _maximum_ _possible_ _resources_ _per_ _hour_ _by_ _both_ _minimizing_ _the_ _amount_ _of_ _neccesary_
_espionages_ _and_ _by_ _always_ _attacking_ _at_ _the_ _most_ _rentable_ _planet,_ _understanding_ _that_ _as_
_the_ _attack_ _that_ _most_ _resources_ _is_ _going_ _to_ _provide_ _the_ _player_ _by_ _unit_ _of_ _travel_ _time._
_The_ _algorithm_ _is_ _based_ _on_ _two_ _ideas:_

_-_ _The_ _mines_ _of_ _an_ _inactive_ _planet_ _are_ _never_ _going_ _to_ _change_ _troughout_ _the_ _time_ _it_
_remains_ _inactive._ _This_ _way,_ _the_ _planet_ _can_ _be_ _spied_ _only_ _once_ _to_ _determine_ _it's_ _mine_
_levels,_ _and_ _simulate_ _the_ _produced_ _resources_ _from_ _that_ _without_ _the_ _need_ _of_ _additional_
_espionages._ _In_ _case_ _it_ _gets_ _to_ _be_ _the_ _most_ _rentable_ _planet_ _to_ _attack,_ _it_ _will_ _be_
_spied_ _again_ _to_ _assure_ _it_ _has_ _not_ _been_ _attacked_ _by_ _other_ _player_ _in_ _the_ _meantime._

_-_ _Second_ _and_ _most_ _important:_ _you_ _get_ _the_ _same_ _amount_ _of_ _resources_ _by_ _attacking_ _a_ _far_
_planet_ _with_ _flight_ _time_ _of_ _2_ _hours_ _and_ _lots_ _of_ _resources,_ _than_ _by_ _attacking_ _two_ _near_
_planets_ _with_ _half_ _of_ _the_ _resources_ _each,_ _but_ _at_ _a_ _flight_ _time_ _of_ _1_ _hour._

_Additionally,_ _those_ _planets_ _with_ _fleet_ _or_ _defenses_ _are_ _re-spied_ _every_ _two_ _days,_ _just_
_in_ _case_ _they_ _have_ _been_ _destroyed,_ _and_ _every_ _night_ _the_ _list_ _of_ _inactive_ _planets_ _is_
_updated,_ _and_ _the_ _new_ _ones_ _are_ _spied._